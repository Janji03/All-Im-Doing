Strutture Dati Elementari

Definiscono in che modo sono organizzati i dati e non quali 
(ad esempio una lista puo contenere interi o stringhe) e definiscono 
le operazioni per accedere e modificare i dati 

Strutture dati elementari: 
1) Liste concatenate 
2) Pile
3) Code 
5) Alberi 

Le strutture dati hanno diverse proprietà

1) Lineari o non lineari (esempio un array puo essere ordinato oppure no)
2) Statiche o Dinamiche ( hanno una dimensione costante oppure dinamica)
3) Omogenee o Eterogenee (possono contenere un solo tipo di dato oppure diversi tipi)


Dizionario: struttura dati di dimensione dinamica che ha un insieme di chiavi ognuna associata ad 
un valore (dato), le chiavi sono univoche mentre i valori possono essere duplicati

Operazioni basilari Dizionario:
1)Search (prende una chiave e restituisce il valore associato)
2)Insert (inserisce una coppia chiave-valore nel Dizionario)
3)Delete (prende una chiave e elemina sia il valore associato che la chiave stessa)

Per implementare il prototipo di chiave-valore possiamo utilizzare un array sul quale 
è possibile effettuare le operazioni basilari di ricerca, inserimento e eliminazione.

(ho implementato le funzioni basilari in java e su virtuale c'è l'analisi del
costo di ogni funzione e le differenze di costo tra array ordinato e non ordinato)

Queste sono le conclusioni:

funzioni:                  Search                    Insert                  Delete 

casi                       medio/pessimo          |   medio/pessimo       |   medio/pessimo 
                                                  |                       |
Array non ordinati         O(n) | O(n)            |  O(n) | O(n)          |   Θ(n)  | Θ(n)
                                                  |                       |
Array ordinati             O(log n) | O(log n)    | O(n) | O(n)           |   O(n) | O(n)

Si puo notare come nel caso di array ordinati si ha un leggero miglioramento nella funzione Search 


Lista:

è una struttura dati in cui gli elementi sono ordinati in ordine sequenziale 
ci sono tre operazioni basilari: ricerca, inserimento, rimozione 
Si può implementare una lista con un array oppure Liste concatenate (Linked List):
-nel caso dell'array l'ordine è determinato dagli indici e lo spazio è limitato
-nelle liste concatenate l'ordine è determinato da una catena di puntatori e 
lo spazio allocato è dinamico 

Liste Concatenate 

esistono diversi tipi di liste :
1) Lista concatenata semplice 
2) Lista doppiamente concatenata
3) Lista concatenata circolare 
4) Lista con puntatori testa e coda 


1) Lista concatenata semplice: 
Struttura: ogni nodo della lista contiene un valore chiave (x.key) e un puntatore al 
nodo successivo (x.next). se x.next è uguale a NIL allora x è l'ultimo nodo della 
lista 

le operazioni base sono: search, head_insert, tail_insert, delete e search_prev


2) Lista doppiamente concatenata:

sono come le liste semplici ma ogni nodo continene un terzo campo x.prev (un puntatore al
nodo precedente), se x.prev = NIL allora x è il primo nodo della lista 

a differenza della lista semplice può essere visitata in entrambe le direzioni 
e nella funzione delete non serve "salvarsi" il nodo precedente a quello che si vuole 
rimuovere. Tuttavia il costo delle operazioni rispetto alle liste semplici rimane invariato


3) Lista concatenata circolare:

Sono liste doppiamente concatenate dove il campo next dell'ultimo nodo punta al 
primo nodo e il campo prev del primo nodo punta all'ultimo nodo

questo tipo di lista permette un accesso piu veloce ( perchè dalla testa si può 
accedere direttamente alla coda e viceversa) ma diventa più complesso visitare la lista 
(e in generale fare cicli sulla lista in quanto nessun nodo punta a NIL). I costi
restano invariati tranne per l'inserimento in coda 

4) Lista con puntatori a testa e coda:
